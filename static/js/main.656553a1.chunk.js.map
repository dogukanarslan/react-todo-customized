{"version":3,"sources":["Header.js","AddTodo.js","Todo.js","TodoList.js","ShowOnlyImportant.js","RemoveItems.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","AddTodo","props","state","inputValue","handleValueChange","bind","updateTheInputValue","event","this","setState","target","value","preventDefault","onSubmit","type","onChange","React","Component","Todo","id","checked","important","visible","itemClass","itemVisibility","style","display","onClick","toggleChecked","content","toggleImportant","disabled","removeItem","TodoList","title","length","map","item","showOnlyImportant","key","ShowOnlyImportant","button","window","localStorage","getItem","JSON","parse","setItem","stringify","RemoveItems","removeAll","Footer","App","todos","addTodo","localTodos","find","concat","Math","random","newArr","todo","currentTodo","filter","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.656553a1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header(){\r\n  return(\r\n    <header className=\"App-header\">\r\n      <h1>Todo App</h1>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nclass AddTodo extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      inputValue:\"\"\r\n    }\r\n    this.handleValueChange = this.handleValueChange.bind(this)\r\n    this.updateTheInputValue = this.updateTheInputValue.bind(this)\r\n  }\r\n\r\n  updateTheInputValue(event){\r\n    this.setState({inputValue: event.target.value})\r\n  }\r\n\r\n  handleValueChange(event){\r\n    event.preventDefault()\r\n    this.setState({inputValue:\"\"})\r\n    this.props.inputValue(this.state.inputValue)\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <section>\r\n        <form onSubmit={this.handleValueChange}>\r\n          <input className=\"addToInput\" type=\"text\" value={this.state.inputValue} onChange={this.updateTheInputValue}/>\r\n          <button className=\"addToButton\">Add</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\n\r\nfunction Todo(props){\r\n  const {id,checked,important,visible} = props;\r\n  let itemClass= \"listItem\"\r\n  let itemVisibility=\"\"\r\n  if (checked){\r\n    itemClass += \" checked\"\r\n  }\r\n\r\n  if(important){\r\n    itemClass += \" important\"\r\n  }\r\n\r\n  if(!visible){\r\n    itemVisibility += \" invisible\"\r\n  }\r\n\r\n  return(\r\n      <div className={itemVisibility}>\r\n        <p className={itemClass} style={{display:\"inline-block\"}} onClick={()=>props.toggleChecked(id)}>{props.content}</p>\r\n        {visible ? <button className=\"itemRemoveButton\" onClick={()=>props.toggleImportant(id)}>!</button> : <button disabled className=\"itemRemoveButton\" onClick={()=>props.toggleImportant(id)}>!</button>}\r\n        {visible ? <button className=\"itemRemoveButton\" onClick={()=>props.removeItem(id)}>X</button> : <button disabled className=\"itemRemoveButton\" onClick={()=>props.removeItem(id)}>X</button>}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nfunction TodoList(props){\r\n  return(\r\n      <div className=\"TodoList\">\r\n        <h1>{props.title}<br/>{props.value.length}</h1>\r\n        <p>{props.value.content}</p>\r\n        <ul>\r\n          <li>\r\n        {props.value.map(item =>\r\n        <Todo showOnlyImportant={props.showOnlyImportant} toggleImportant={props.toggleImportant} toggleChecked={props.toggleChecked} removeItem={props.removeItem} {...item} key={item.id}/>\r\n        )}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\n\r\nclass ShowOnlyImportant extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state={button: true}\r\n  }\r\n\r\n  componentDidMount(){\r\n    let button = window.localStorage.getItem(\"button\");\r\n    if(button){\r\n      button  = JSON.parse(button);\r\n    }\r\n    this.setState({\r\n      button: !button\r\n    })\r\n  }\r\n\r\n  showOnlyImportant(){\r\n    this.props.showOnlyImportant();\r\n    this.setState({button: !this.state.button},()=>window.localStorage.setItem(\"button\",JSON.stringify(this.state.button)))\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        {this.state.button ? <button className=\"removeButton\" onClick={()=>this.showOnlyImportant()}>Show Only Important</button> :\r\n        <button className=\"removeButton\" onClick={()=>this.showOnlyImportant()}>Show All</button>}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ShowOnlyImportant\r\n","import React from \"react\";\r\n\r\nclass RemoveItems extends React.Component{\r\n  RemoveItems(){\r\n    this.props.removeAll()\r\n  }\r\n  render(){\r\n    return(\r\n      <div>\r\n        <button className=\"removeButton\" onClick={()=>{this.RemoveItems()}}>Remove All</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default RemoveItems\r\n","import React from \"react\";\r\n\r\nfunction Footer(){\r\n  return(\r\n    <footer>\r\n      <p>Develop in 2019 &copy;</p>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport \"./Reset.css\"\r\nimport './App.css';\r\nimport Header from \"./Header\";\r\nimport AddTodo from \"./AddTodo\";\r\nimport TodoList from \"./TodoList\";\r\nimport ShowOnlyImportant from \"./ShowOnlyImportant\"\r\nimport RemoveItems from \"./RemoveItems\";\r\nimport Footer from \"./Footer\";\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      todos:[]\r\n    }\r\n    this.addTodo=this.addTodo.bind(this)\r\n    this.removeAll=this.removeAll.bind(this)\r\n    this.removeItem=this.removeItem.bind(this)\r\n    this.toggleChecked=this.toggleChecked.bind(this)\r\n    this.toggleImportant=this.toggleImportant.bind(this)\r\n    this.showOnlyImportant=this.showOnlyImportant.bind(this)\r\n  }\r\n\r\n  componentDidMount(){\r\n    let localTodos = window.localStorage.getItem(\"todos\");\r\n    if(localTodos){\r\n      localTodos  = JSON.parse(localTodos);\r\n    }\r\n    this.setState({\r\n      todos: localTodos || []\r\n    })\r\n  }\r\n\r\n  addTodo(inputValue){\r\n    if (inputValue.length<5 || this.state.todos.find(item => item.content === inputValue)){\r\n      return;\r\n    }else{\r\n      this.setState({todos: this.state.todos.concat([{content: inputValue,id: Math.random(),checked: false,important: false,visible: true}])\r\n  },()=>window.localStorage.setItem(\"todos\",JSON.stringify(this.state.todos)))}\r\n  }\r\n\r\n  toggleChecked(id){\r\n    const newArr = this.state.todos.map(todo=>{\r\n      if (id === todo.id){\r\n        let currentTodo = {...todo};\r\n        currentTodo.checked = !currentTodo.checked;\r\n        return currentTodo;\r\n      } else{\r\n        return todo;\r\n      }\r\n    });\r\n    this.setState({\r\n      todos: newArr\r\n    },()=>window.localStorage.setItem(\"todos\",JSON.stringify(this.state.todos)))\r\n  }\r\n\r\n  showOnlyImportant(){\r\n    const newArr = this.state.todos.map(todo=>{\r\n      if (todo.important ===false ){\r\n        let currentTodo = {...todo};\r\n        currentTodo.visible = !currentTodo.visible;\r\n        return currentTodo;\r\n      } else{\r\n        return todo;\r\n      }\r\n    });\r\n    this.setState({todos: newArr},()=>window.localStorage.setItem(\"todos\",JSON.stringify(this.state.todos)))\r\n  }\r\n\r\n  removeItem(id){\r\n    this.setState({todos: this.state.todos.filter(todo=>{\r\n      return todo.id !== id\r\n    })},()=>window.localStorage.setItem(\"todos\",JSON.stringify(this.state.todos)))\r\n  }\r\n\r\n  removeAll(){\r\n    this.setState({todos: []},()=>window.localStorage.setItem(\"todos\",JSON.stringify(this.state.todos)))\r\n  }\r\n\r\n  toggleImportant(id){\r\n    const newArr = this.state.todos.map(todo=>{\r\n      if (id === todo.id){\r\n        let currentTodo = {...todo};\r\n        currentTodo.important = !currentTodo.important;\r\n        return currentTodo;\r\n      } else{\r\n        return todo;\r\n      }\r\n    });\r\n    this.setState({todos: newArr},()=>window.localStorage.setItem(\"todos\",JSON.stringify(this.state.todos)))\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <main>\r\n          <AddTodo inputValue={this.addTodo}/>\r\n          <div className=\"TodoLists\">\r\n            <TodoList title={\"Not Completed\"} toggleImportant={this.toggleImportant} toggleChecked={this.toggleChecked} removeItem={this.removeItem} value={this.state.todos.filter(todo=>todo.checked!==true)}/>\r\n            <TodoList title={\"Completed\"} toggleImportant={this.toggleImportant} toggleChecked={this.toggleChecked} removeItem={this.removeItem} value={this.state.todos.filter(todo=>todo.checked===true)}/>\r\n          </div>\r\n          <ShowOnlyImportant showOnlyImportant={this.showOnlyImportant}/>\r\n          <RemoveItems removeAll={this.removeAll}/>\r\n        </main>\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}